{"version":3,"sources":["gltf/free_1995_fiat_punto_gt/Fiat.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Fiat","props","group","useRef","useGLTF","nodes","materials","ref","dispose","rotation","Math","PI","position","scale","geometry","Punto_GT_0","material","gt_black","Punto_GT_1","gt_license","Punto_GT_2","gt_tire","Punto_GT_3","gt_rim","Punto_GT_4","gt_windows","Punto_GT_5","Punto_GT_6","gt_body","Punto_GT_7","gt_details","Punto_GT_8","gt_shadow","preload","App","useState","rotate","setRotate","onClick","shadows","dpr","camera","fov","zoom","fallback","Stage","environment","intensity","contactShadowOpacity","contactShadowBlur","OrbitControls","autoRotate","enablePan","enableZoom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAWaA,EAAO,SAACC,GACnB,IAAMC,EAAQC,mBAEd,EAA6BC,YAAQ,eAA7BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UACf,OACE,+CAAOC,IAAKL,GAAWD,GAAvB,IAA8BO,QAAS,KAAvC,SACE,uBAAOC,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAAnC,SACE,wBAAOC,SAAU,EAAE,IAAM,KAAO,KAAOC,MAAO,IAA9C,UACE,sBACEC,SAAUT,EAAMU,WAAWD,SAC3BE,SAAUV,EAAUW,WAEtB,sBACEH,SAAUT,EAAMa,WAAWJ,SAC3BE,SAAUV,EAAUa,aAEtB,sBACEL,SAAUT,EAAMe,WAAWN,SAC3BE,SAAUV,EAAUe,UAEtB,sBACEP,SAAUT,EAAMiB,WAAWR,SAC3BE,SAAUV,EAAUiB,SAEtB,sBACET,SAAUT,EAAMmB,WAAWV,SAC3BE,SAAUV,EAAUmB,aAEtB,sBACEX,SAAUT,EAAMqB,WAAWZ,SAC3BE,SAAUV,EAAU,cAEtB,sBACEQ,SAAUT,EAAMsB,WAAWb,SAC3BE,SAAUV,EAAUsB,UAEtB,sBACEd,SAAUT,EAAMwB,WAAWf,SAC3BE,SAAUV,EAAUwB,aAEtB,sBACEhB,SAAUT,EAAM0B,WAAWjB,SAC3BE,SAAUV,EAAU0B,YAEtB,uBAAOvB,SAAU,CAAC,KAAO,IAAM,IAAMI,MAAO,CAAC,EAAG,EAAG,KACnD,uBAAOJ,SAAU,EAAE,KAAM,IAAK,KAAOI,MAAO,CAAC,EAAG,EAAG,cAO7DT,IAAQ6B,QAAQ,eCvBDC,MAnCf,WACE,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAMA,OACE,qCACE,wBAAQC,QANS,WACnBD,GAAWD,IAKT,oBACA,eAAC,IAAD,CACEG,SAAO,EACPC,IAAK,CAAC,EAAG,GACTC,OAAQ,CAAE7B,SAAU,CAAC,EAAG,EAAG,KAAM8B,IAAK,GAAIC,KAAM,KAHlD,UAKE,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAACC,EAAA,EAAD,CACEC,YAAY,OACZC,UAAW,GACXC,qBAAsB,GACtBC,kBAAmB,EAJrB,SAME,cAAC,EAAD,QAGJ,cAACC,EAAA,EAAD,CACEC,WAAYf,EACZgB,WAAW,EACXC,YAAY,WCnBPC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.216387f4.chunk.js","sourcesContent":["/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\nauthor: Karol Miklas (https://sketchfab.com/karolmiklas)\r\nlicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\r\nsource: https://sketchfab.com/3d-models/free-1995-fiat-punto-gt-48db6facb4b64e99b60f36b8c01185e1\r\ntitle: (FREE) 1995 Fiat Punto GT\r\n*/\r\n\r\nimport React, { useRef, useState } from \"react\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\n\r\nexport const Fiat = (props) => {\r\n  const group = useRef();\r\n\r\n  const { nodes, materials } = useGLTF(\"/scene.gltf\");\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group rotation={[-Math.PI / 2, 0, 0]}>\r\n        <group position={[-0.04, 0.03, -0.04]} scale={0.45}>\r\n          <mesh\r\n            geometry={nodes.Punto_GT_0.geometry}\r\n            material={materials.gt_black}\r\n          />\r\n          <mesh\r\n            geometry={nodes.Punto_GT_1.geometry}\r\n            material={materials.gt_license}\r\n          />\r\n          <mesh\r\n            geometry={nodes.Punto_GT_2.geometry}\r\n            material={materials.gt_tire}\r\n          />\r\n          <mesh\r\n            geometry={nodes.Punto_GT_3.geometry}\r\n            material={materials.gt_rim}\r\n          />\r\n          <mesh\r\n            geometry={nodes.Punto_GT_4.geometry}\r\n            material={materials.gt_windows}\r\n          />\r\n          <mesh\r\n            geometry={nodes.Punto_GT_5.geometry}\r\n            material={materials[\"Hemi.001\"]}\r\n          />\r\n          <mesh\r\n            geometry={nodes.Punto_GT_6.geometry}\r\n            material={materials.gt_body}\r\n          />\r\n          <mesh\r\n            geometry={nodes.Punto_GT_7.geometry}\r\n            material={materials.gt_details}\r\n          />\r\n          <mesh\r\n            geometry={nodes.Punto_GT_8.geometry}\r\n            material={materials.gt_shadow}\r\n          />\r\n          <group rotation={[0.53, -0.23, 0.2]} scale={[1, 1, 1]} />\r\n          <group rotation={[-1.55, 1.1, 0.63]} scale={[1, 1, 1]} />\r\n        </group>\r\n      </group>\r\n    </group>\r\n  );\r\n};\r\n\r\nuseGLTF.preload(\"/scene.gltf\");\r\n","import React, { Suspense, useState } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, Stage } from \"@react-three/drei\";\nimport { Fiat } from \"./gltf/free_1995_fiat_punto_gt/Fiat\";\n\nfunction App() {\n  const [rotate, setRotate] = useState(false);\n\n  const toggleRotate = () => {\n    setRotate(!rotate);\n  };\n\n  return (\n    <>\n      <button onClick={toggleRotate}>Rotate</button>\n      <Canvas\n        shadows\n        dpr={[1, 2]}\n        camera={{ position: [0, 0, 150], fov: 60, zoom: 1.2 }}\n      >\n        <Suspense fallback={null}>\n          <Stage\n            environment=\"city\"\n            intensity={0.5}\n            contactShadowOpacity={0.6}\n            contactShadowBlur={1}\n          >\n            <Fiat />\n          </Stage>\n        </Suspense>\n        <OrbitControls\n          autoRotate={rotate}\n          enablePan={false}\n          enableZoom={false}\n        />\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}